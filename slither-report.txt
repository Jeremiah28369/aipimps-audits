slither : 'npx hardhat clean' running (wd: C:\AiPimps)
At line:3 char:1
+ slither . --solc-remaps @openzeppelin=node_modules/@openzeppelin 2>&1 ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: ('npx hardhat cl...wd: C:\AiPimps):String) [], RemoteException
    + FullyQualifiedErrorId : NativeCommandError
 
'npx hardhat clean --global' running (wd: C:\AiPimps)
'npx hardhat compile --force' running (wd: C:\AiPimps)
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) has 
bitwise-xor operator ^ instead of the exponentiation operator **: 
	 - inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#184)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-exponentiation
INFO:Detectors:
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a 
multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#169)
	- inverse = (3 * denominator) ^ 2 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#184)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a 
multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#169)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#188)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a 
multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#169)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#189)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a 
multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#169)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#190)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a 
multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#169)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#191)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a 
multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#169)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#192)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a 
multiplication on the result of a division:
	- denominator = denominator / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#169)
	- inverse *= 2 - denominator * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#193)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) performs a 
multiplication on the result of a division:
	- prod0 = prod0 / twos (node_modules/@openzeppelin/contracts/utils/math/Math.sol#172)
	- result = prod0 * inverse (node_modules/@openzeppelin/contracts/utils/math/Math.sol#199)
StakingSinglePool.earned(address) (contracts/StakingSinglePool.sol#66-72) performs a multiplication on the result of a 
division:
	- accrued = (userStake[account] * delta) / 1e18 (contracts/StakingSinglePool.sol#68)
	- rewards[account] + (accrued * mult) / ONE (contracts/StakingSinglePool.sol#71)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#divide-before-multiply
INFO:Detectors:
Reentrancy in StakingSinglePool.deposit(uint256) (contracts/StakingSinglePool.sol#74-80):
	External calls:
	- require(bool,string)(stakingToken.transferFrom(msg.sender,address(this),amount),xferFrom) 
(contracts/StakingSinglePool.sol#76)
	State variables written after the call(s):
	- totalStaked += amount (contracts/StakingSinglePool.sol#78)
	StakingSinglePool.totalStaked (contracts/StakingSinglePool.sol#19) can be used in cross function reentrancies:
	- StakingSinglePool.rewardPerToken() (contracts/StakingSinglePool.sol#59-64)
	- StakingSinglePool.totalStaked (contracts/StakingSinglePool.sol#19)
	- userStake[msg.sender] += amount (contracts/StakingSinglePool.sol#77)
	StakingSinglePool.userStake (contracts/StakingSinglePool.sol#21) can be used in cross function reentrancies:
	- StakingSinglePool._updateReward(address) (contracts/StakingSinglePool.sol#111-118)
	- StakingSinglePool.earned(address) (contracts/StakingSinglePool.sol#66-72)
	- StakingSinglePool.userStake (contracts/StakingSinglePool.sol#21)
Reentrancy in StakingSinglePool.exit() (contracts/StakingSinglePool.sol#106-109):
	External calls:
	- withdraw(userStake[msg.sender]) (contracts/StakingSinglePool.sol#107)
		- require(bool,string)(stakingToken.transfer(msg.sender,amount),xfer) (contracts/StakingSinglePool.sol#92)
	- claim() (contracts/StakingSinglePool.sol#108)
		- require(bool,string)(rewardToken.transfer(msg.sender,reward),reward xfer) (contracts/StakingSinglePool.sol#101)
	State variables written after the call(s):
	- claim() (contracts/StakingSinglePool.sol#108)
		- lastUpdateTime = lastTimeRewardApplicable() (contracts/StakingSinglePool.sol#113)
	StakingSinglePool.lastUpdateTime (contracts/StakingSinglePool.sol#17) can be used in cross function reentrancies:
	- StakingSinglePool._updateReward(address) (contracts/StakingSinglePool.sol#111-118)
	- StakingSinglePool.lastUpdateTime (contracts/StakingSinglePool.sol#17)
	- StakingSinglePool.rewardPerToken() (contracts/StakingSinglePool.sol#59-64)
	- claim() (contracts/StakingSinglePool.sol#108)
		- rewardPerTokenStored = rewardPerToken() (contracts/StakingSinglePool.sol#112)
	StakingSinglePool.rewardPerTokenStored (contracts/StakingSinglePool.sol#18) can be used in cross function 
reentrancies:
	- StakingSinglePool._updateReward(address) (contracts/StakingSinglePool.sol#111-118)
	- StakingSinglePool.rewardPerToken() (contracts/StakingSinglePool.sol#59-64)
	- StakingSinglePool.rewardPerTokenStored (contracts/StakingSinglePool.sol#18)
	- claim() (contracts/StakingSinglePool.sol#108)
		- rewards[msg.sender] = 0 (contracts/StakingSinglePool.sol#100)
		- rewards[account] = rewards[account] + ((userStake[account] * (rewardPerTokenStored - 
userRewardPerTokenPaid[account])) / 1e18) (contracts/StakingSinglePool.sol#115)
	StakingSinglePool.rewards (contracts/StakingSinglePool.sol#23) can be used in cross function reentrancies:
	- StakingSinglePool._updateReward(address) (contracts/StakingSinglePool.sol#111-118)
	- StakingSinglePool.earned(address) (contracts/StakingSinglePool.sol#66-72)
	- StakingSinglePool.rewards (contracts/StakingSinglePool.sol#23)
	- claim() (contracts/StakingSinglePool.sol#108)
		- userRewardPerTokenPaid[account] = rewardPerTokenStored (contracts/StakingSinglePool.sol#116)
	StakingSinglePool.userRewardPerTokenPaid (contracts/StakingSinglePool.sol#22) can be used in cross function 
reentrancies:
	- StakingSinglePool._updateReward(address) (contracts/StakingSinglePool.sol#111-118)
	- StakingSinglePool.earned(address) (contracts/StakingSinglePool.sol#66-72)
	- StakingSinglePool.userRewardPerTokenPaid (contracts/StakingSinglePool.sol#22)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-1
INFO:Detectors:
ERC20Permit.constructor(string).name (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#39) 
shadows:
	- ERC20.name() (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#58-60) (function)
	- IERC20Metadata.name() (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#15) (function)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#local-variable-shadowing
INFO:Detectors:
Reentrancy in BoostHub._boost(address,bytes32,uint256) (contracts/BoostHub.sol#51-63):
	External calls:
	- require(bool,string)(IERC20(address(token)).transferFrom(from,address(this),amount),xferFrom) 
(contracts/BoostHub.sol#53)
	- token.burn(burned) (contracts/BoostHub.sol#58)
	- require(bool,string)(IERC20(address(token)).transfer(treasury,toTreasury),treasury xfer failed) 
(contracts/BoostHub.sol#59)
	State variables written after the call(s):
	- score[imageId] += amount (contracts/BoostHub.sol#61)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#reentrancy-vulnerabilities-2
INFO:Detectors:
ERC20Permit.permit(address,address,uint256,uint256,uint8,bytes32,bytes32) 
(node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#44-67) uses timestamp for comparisons
	Dangerous comparisons:
	- block.timestamp > deadline (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#53)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#block-timestamp
INFO:Detectors:
ShortStrings.toString(ShortString) (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#63-73) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#68-71)
StorageSlot.getAddressSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#59-64) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#61-63)
StorageSlot.getBooleanSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#69-74) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#71-73)
StorageSlot.getBytes32Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#79-84) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#81-83)
StorageSlot.getUint256Slot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#89-94) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#91-93)
StorageSlot.getStringSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#99-104) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#101-103)
StorageSlot.getStringSlot(string) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#109-114) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#111-113)
StorageSlot.getBytesSlot(bytes32) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#119-124) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#121-123)
StorageSlot.getBytesSlot(bytes) (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#129-134) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#131-133)
Strings.toString(uint256) (node_modules/@openzeppelin/contracts/utils/Strings.sol#24-44) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#30-32)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/Strings.sol#36-38)
ECDSA.tryRecover(bytes32,bytes) (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#56-73) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#64-68)
MessageHashUtils.toEthSignedMessageHash(bytes32) 
(node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol#30-37) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol#32-36)
MessageHashUtils.toTypedDataHash(bytes32,bytes32) 
(node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol#76-85) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol#78-84)
Math.mulDiv(uint256,uint256,uint256) (node_modules/@openzeppelin/contracts/utils/math/Math.sol#123-202) uses assembly
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#130-133)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#154-161)
	- INLINE ASM (node_modules/@openzeppelin/contracts/utils/math/Math.sol#167-176)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#assembly-usage
INFO:Detectors:
2 different versions of Solidity are used:
	- Version constraint ^0.8.20 is used by:
		-^0.8.20 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)
		-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Nonces.sol#3)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
		-^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#4)
	- Version constraint ^0.8.24 is used by:
		-^0.8.24 (contracts/BoostHub.sol#2)
		-^0.8.24 (contracts/PIMPToken.sol#2)
		-^0.8.24 (contracts/StakingSinglePool.sol#2)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#different-pragma-directives-are-used
INFO:Detectors:
Version constraint ^0.8.20 contains known severe issues (https://solidity.readthedocs.io/en/latest/bugs.html)
	- VerbatimInvalidDeduplication
	- FullInlinerNonExpressionSplitArgumentEvaluationOrder
	- MissingSideEffectsOnSelectorAccess.
It is used by:
	- ^0.8.20 (node_modules/@openzeppelin/contracts/access/Ownable.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/interfaces/IERC5267.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/interfaces/draft-IERC6093.sol#3)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Context.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Nonces.sol#3)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/StorageSlot.sol#5)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/Strings.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/cryptography/ECDSA.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/Math.sol#4)
	- ^0.8.20 (node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol#4)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#incorrect-versions-of-solidity
INFO:Detectors:
Function ERC20Permit.DOMAIN_SEPARATOR() 
(node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol#80-82) is not in mixedCase
Function IERC20Permit.DOMAIN_SEPARATOR() 
(node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol#89) is not in mixedCase
Function EIP712._EIP712Name() (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#146-148) is not in 
mixedCase
Function EIP712._EIP712Version() (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#157-159) is not 
in mixedCase
Parameter BoostHub.setParams(address,uint256,uint256)._treasury (contracts/BoostHub.sol#33) is not in mixedCase
Parameter BoostHub.setParams(address,uint256,uint256)._burnBps (contracts/BoostHub.sol#33) is not in mixedCase
Parameter BoostHub.setParams(address,uint256,uint256)._minBoost (contracts/BoostHub.sol#33) is not in mixedCase
Parameter PIMPToken.adjustGuardLimits(uint256,uint256,bool)._maxTx (contracts/PIMPToken.sol#102) is not in mixedCase
Parameter PIMPToken.adjustGuardLimits(uint256,uint256,bool)._maxWallet (contracts/PIMPToken.sol#102) is not in 
mixedCase
Parameter PIMPToken.adjustGuardLimits(uint256,uint256,bool)._delay (contracts/PIMPToken.sol#102) is not in mixedCase
Parameter StakingSinglePool.setRewardRate(uint256)._rate (contracts/StakingSinglePool.sol#40) is not in mixedCase
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#conformance-to-solidity-naming-conventions
INFO:Detectors:
ShortStrings.slitherConstructorConstantVariables() 
(node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#40-123) uses literals with too many digits:
	- FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF 
(node_modules/@openzeppelin/contracts/utils/ShortStrings.sol#42)
Reference: https://github.com/crytic/slither/wiki/Detector-Documentation#too-many-digits
INFO:Detectors:
EIP712._nameFallback (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#51) should be constant 
EIP712._versionFallback (node_modules/@openzeppelin/contracts/utils/cryptography/EIP712.sol#52) should be constant 
Reference: 
https://github.com/crytic/slither/wiki/Detector-Documentation#state-variables-that-could-be-declared-constant
INFO:Slither:. analyzed (27 contracts with 100 detectors), 45 result(s) found